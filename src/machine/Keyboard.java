/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package machine;

import java.awt.Toolkit;
import java.awt.event.KeyEvent;;
import java.awt.event.KeyListener;

/**
 *
 * @author admin
 */
public final class Keyboard implements KeyListener {
    
    public boolean CAPSL = false;
    public boolean NUML  = false;
    public boolean SCRL  = false;
    public boolean ALT  = false;
    private int key;
    private Toolkit toolkit;
    private boolean pressed = false;
    private int[][] mapakl = {
/*                32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131 */
/*                20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 2A, 2B, 2C, 2D, 2E, 2F, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 3A, 3B, 3C, 3D, 3E, 3F, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 4A, 4B, 4C, 4D, 4E, 4F, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 5A, 5B, 5C, 5D, 5E, 5F, 60, 61  62  63  64  65  66  67  68  69  6A  6B  6C  6D  6E  6F  70  71  72  73  74  75  76  77  78  79  7A  7B  7C  7D  7E  7F  80  81  82  83 */
/*                    !   "   #   $   %   &   '   (   )   *   +   ,   -   .   /   0   1   2   3   4   5   6   7   8   9   :   ;   <   =   >   ?   @   A   B   C   D   E   F   G   H   I   J   K   L   M   N   O   P   Q   R   S   T   U   V   W   X   Y   Z   [   \   ]   ^   _   `   a   b   c   d   e   f   g   h   i   j   k   l   m   n   o   p   q   r   s   t   u   v   w   x   y   z   {   |   }   ~   ⌂                  */        

/* 0 bez  */    { 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 63, 46, 47, 60, 94, 34, 35, 36, 37, 38, 39, 40, 41, 58, 33, 60, 61, 62, 63, 64, 97, 98, 99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128, 62,130,131},
/* 1 SH   */    { 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 63, 46, 47, 60, 94, 34, 35, 36, 37, 38, 39, 40, 41, 58, 33, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128, 62,130,131},
/* 2 Ctrl */    { 96, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 63, 46, 47, 48,126,220,221,222,223,224,225,226,227, 58, 33, 60, 61, 62, 63,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 90,123,124,125, 94, 95, 96, 97, 98, 99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128, 62,130,131},
/* 3 Sh+Ct*/    { 95, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 63, 46, 47, 48, 94,208,209,210,211,212,213,214,215, 58, 33, 60, 61, 62, 63,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 94, 95, 96, 97, 98, 99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128, 62,130,131},

/* 4 AK   */    { 32,  6, 21,  4,  1,  8, 24, 26, 10, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,  6, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,103,104,105,106,107,108,109,110,111,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,192,193,194,195},
/* 5 AK+SH*/    { 32,  6, 34,255,  1,  8, 24, 26, 10, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,103,104,105,106,107,108,109,110,111,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,200,201,202,203},
/* 6 AK+Ct*/    { 32, 17, 21,255,  1,  2, 12,  9, 11, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,  6, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,103,104,105,106,107,108,109,110,111,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,196,197,198,199},
/* 7 AK+SH+Ct*/ { 32, 17, 34, 35,  1,  2, 12,  9, 11, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,103,104,105,106,107,108,109,110,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,204,205,206,207},

/* 8 nump */    { 32, 29, 31, 30, 28,  8, 24, 26, 10, 27, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 42, 43,108, 45, 44, 47,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131},
/* 9 np+SH */   { 32, 29, 31, 30, 28,  8, 24, 26, 10, 27, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 42, 43,108, 45, 44, 47,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131},
/*10 np+Ct */   { 32, 29, 31, 30, 28,  2, 12,  9, 11, 16, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,242,243,244,245,246,247,248,249,250,251, 42, 43,108, 45, 44,231,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131},
/*11 np+SH+Ct*/ { 32, 29, 31, 30, 28,  2, 12,  9, 11, 16, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,232,233,234,235,236,237,238,239,240,241,254,252,108,253, 44,219,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131},
/*12 nump+ALT */{ 32, 29, 31, 30, 28,  8, 24, 26, 10, 27, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 48, 4, 50, 21, 52, 53, 54, 1, 56, 6, 42, 43,108, 45, 44, 47,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131},
                };
    
    public void reset() {
        pressed = false;
        key = 0;
        toolkit = Toolkit.getDefaultToolkit();
        CAPSL=toolkit.getLockingKeyState(KeyEvent.VK_CAPS_LOCK);
        NUML=toolkit.getLockingKeyState(KeyEvent.VK_NUM_LOCK);
        SCRL=toolkit.getLockingKeyState(KeyEvent.VK_SCROLL_LOCK);
    }

    public int isKey() {
        return pressed ? 1 : 0;
    }
    
    public int getKey() {
        pressed = false;
//        System.out.println(String.format("key: %04X", key));
        return key;
    }
    
    @Override
    public void keyTyped(KeyEvent ke) {
 
    }

    @Override
    public void keyPressed(KeyEvent ke) {
        int kodkl,ma;
        boolean isact,shift,ss;

        kodkl = ke.getKeyCode(); // isact=ke.isActionKey();
        if (kodkl==0) kodkl = ke.getExtendedKeyCode();
        
        if (kodkl==0x100016F) kodkl=999;              // ;
        if (kodkl==0x10000A7) kodkl=58;               // :
        if (kodkl==155) kodkl=92;                     // \ (Insert)
        if (kodkl==135) kodkl=93;                     // ] (¨)
        if (kodkl==0x020A) kodkl=91;                  // [ ())
        if (kodkl==0x10000FA) kodkl=64;               // @ (ú)
        if (kodkl==12) kodkl=41;                      // 5 na numpadu
        
        if ((kodkl == 16)||(kodkl == 17)||(kodkl == 18)) shift=true; else shift=false;
        ss=ke.isShiftDown();
        ALT=ke.isAltDown();
        if (CAPSL) ss=!ss;
        ma=0;
        if (ke.isActionKey()) ma=4;;
        if (ke.getKeyLocation()== KeyEvent.KEY_LOCATION_NUMPAD) ma=8;
        if (ss) ma=ma+1;
        if (ke.isControlDown()) ma=ma+2;
        if ((ALT)&&(ma==8)) ma=12;
        
        if (kodkl==145) {shift=true;toolkit = Toolkit.getDefaultToolkit();SCRL=toolkit.getLockingKeyState(KeyEvent.VK_SCROLL_LOCK);}
        if (kodkl==20) {shift=true;toolkit = Toolkit.getDefaultToolkit();CAPSL=toolkit.getLockingKeyState(KeyEvent.VK_CAPS_LOCK);}
        if (kodkl==144) {shift=true;toolkit = Toolkit.getDefaultToolkit();NUML=toolkit.getLockingKeyState(KeyEvent.VK_NUM_LOCK);}
        
        if ((ma>3)&&(ma<8)&&SCRL&&(kodkl>111)&&(kodkl<132)) kodkl=kodkl+10;

        System.out.print(String.format("key: %04X  mapa: %02X", kodkl,ma));
        
        if (!shift){
            if ((kodkl>31)&&(kodkl<132)) key = mapakl[ma][kodkl-32];
            else {
                   switch(kodkl) {
                       case 8: key = 8; break;    // BackSpace
                       case 9: key = 9; break;    // TAB
                       case 10: key = 13; break;  // Enter (Vezmi)
                       case 222: key = 58;break;  // : pro Linux
                       case 999: key = 59;break;  // vedle L (ů)
                       default: key = 32;         // space  pro cokoliv jiného neznámého
                                 };
                 };
            pressed = true;
            System.out.println(String.format("    klávesa TNS: %02X", key));
        }
        else {pressed = false;
              ke.consume();
              System.out.println(" - nezpracovává TNS");
             };
    }

    @Override
    public void keyReleased(KeyEvent ke) {
//        switch(ke.getKeyCode()) {
//            
//        }  //switch
    }

}